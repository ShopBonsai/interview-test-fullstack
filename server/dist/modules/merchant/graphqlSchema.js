"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_express_1 = require("apollo-server-express");
var typeDefs = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type Merchant {\n    guid: String\n    logo: String\n    dateCreated: String\n    publishedState: Boolean\n    brands: [Brand]\n    merchant: String\n    products(skip: Int, limit: Int): [Product]\n    commissionFee: String\n    contactEmail: String\n    phone: String\n    address: String\n    publishedDate: String\n    publishedBy: User\n    companyDescription: String\n  }\n\n  input MerchantInput {\n    logo: String\n    publishedState: Boolean\n    merchant: String\n    commissionFee: String\n    contactEmail: String\n    phone: String\n    address: String\n    companyDescription: String\n  }\n  type Product {\n    id: String!\n    belongsToBrand: ID!,\n    belongsToMerchant: ID!,\n    name: String!\n    price: Float!\n    description: String\n    color: String\n    size: String\n    quantity: Int!\n    image: String!\n    brand: Brand\n    merchant: Merchant\n  }\n  type User {\n    userId: String!\n    firstName: String!\n    lastName: String!\n    email: String!\n    role: String!\n  }\n\n  type Brand {\n    name: String\n    merchantId: ID\n    merchant: Merchant\n  }\n  type Query {\n    merchants: [Merchant!]!\n    products(merchant: ID, sortBy: SortBy, limit: Int, skip: Int): [Product!]!\n    brands: [Brand!]!\n  }\n  type Mutation {\n    createMerchant(input: MerchantInput!): Merchant\n    editMerchant(publishedState: Boolean!): Merchant\n  }\n\n  enum SortBy { \n    merchant\n    brand\n  }\n"], ["\n  type Merchant {\n    guid: String\n    logo: String\n    dateCreated: String\n    publishedState: Boolean\n    brands: [Brand]\n    merchant: String\n    products(skip: Int, limit: Int): [Product]\n    commissionFee: String\n    contactEmail: String\n    phone: String\n    address: String\n    publishedDate: String\n    publishedBy: User\n    companyDescription: String\n  }\n\n  input MerchantInput {\n    logo: String\n    publishedState: Boolean\n    merchant: String\n    commissionFee: String\n    contactEmail: String\n    phone: String\n    address: String\n    companyDescription: String\n  }\n  type Product {\n    id: String!\n    belongsToBrand: ID!,\n    belongsToMerchant: ID!,\n    name: String!\n    price: Float!\n    description: String\n    color: String\n    size: String\n    quantity: Int!\n    image: String!\n    brand: Brand\n    merchant: Merchant\n  }\n  type User {\n    userId: String!\n    firstName: String!\n    lastName: String!\n    email: String!\n    role: String!\n  }\n\n  type Brand {\n    name: String\n    merchantId: ID\n    merchant: Merchant\n  }\n  type Query {\n    merchants: [Merchant!]!\n    products(merchant: ID, sortBy: SortBy, limit: Int, skip: Int): [Product!]!\n    brands: [Brand!]!\n  }\n  type Mutation {\n    createMerchant(input: MerchantInput!): Merchant\n    editMerchant(publishedState: Boolean!): Merchant\n  }\n\n  enum SortBy { \n    merchant\n    brand\n  }\n"])));
exports.typeDefs = typeDefs;
var templateObject_1;
//# sourceMappingURL=graphqlSchema.js.map